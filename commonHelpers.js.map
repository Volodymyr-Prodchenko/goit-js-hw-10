{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nlet userSelectedDate;\nlet countdownInterval;\n\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates[0];\n        const countdownInterval = userSelectedDate - new Date();\n\n        if (countdownInterval < 0) {\n               iziToast.error({\n        color: 'red',\n        position: 'topRight',\n        message: 'Please choose a date in the future',\n      });\n            \n            startBtn.disabled = true;\n            inputTime.disabled = false;\n        } else {\n            startBtn.disabled = false;\n            inputTime.disabled = true;\n        }\n    },\n};\n\nconst flatpickrInstance = flatpickr('#datetime-picker', options);\nconst inputTime = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('[data-start]');\nconst timeValues = document.querySelectorAll('.value');\n\nstartBtn.disabled = true;\n\nstartBtn.addEventListener('click', () => {\n  countdownInterval = setInterval(() => {\n    const timeInterval = userSelectedDate - new Date();\n    \n    if (timeInterval < 0) {\n      clearInterval(countdownInterval);\n      startBtn.disabled = true;\n      inputTime.disabled = false;\n      return;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(timeInterval);\n    updateTimerDisplay({ days, hours, minutes, seconds });\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimerDisplay({ days, hours, minutes, seconds }) {\n  timeValues[0].textContent = String(days).padStart(2, '0');\n  timeValues[1].textContent = String(hours).padStart(2, '0');\n  timeValues[2].textContent = String(minutes).padStart(2, '0');\n  timeValues[3].textContent = String(seconds).padStart(2, '0');\n}"],"names":["userSelectedDate","countdownInterval","options","selectedDates","iziToast","startBtn","inputTime","flatpickr","timeValues","timeInterval","days","hours","minutes","seconds","convertMs","updateTimerDisplay","ms"],"mappings":"+IAKA,IAAIA,EACAC,EAGJ,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnBH,EAAmBG,EAAc,CAAC,EACRH,EAAmB,IAAI,KAEzB,GACjBI,EAAS,MAAM,CACtB,MAAO,MACP,SAAU,WACV,QAAS,oCACjB,CAAO,EAEKC,EAAS,SAAW,GACpBC,EAAU,SAAW,KAErBD,EAAS,SAAW,GACpBC,EAAU,SAAW,GAE5B,CACL,EAE0BC,EAAU,mBAAoBL,CAAO,EAC/D,MAAMI,EAAY,SAAS,cAAc,kBAAkB,EACrDD,EAAW,SAAS,cAAc,cAAc,EAChDG,EAAa,SAAS,iBAAiB,QAAQ,EAErDH,EAAS,SAAW,GAEpBA,EAAS,iBAAiB,QAAS,IAAM,CACvCJ,EAAoB,YAAY,IAAM,CACpC,MAAMQ,EAAeT,EAAmB,IAAI,KAE5C,GAAIS,EAAe,EAAG,CACpB,cAAcR,CAAiB,EAC/BI,EAAS,SAAW,GACpBC,EAAU,SAAW,GACrB,MACD,CAED,KAAM,CAAE,KAAAI,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAY,EAChEM,EAAmB,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAS,CAAA,CACrD,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUE,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAmB,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC7DL,EAAW,CAAC,EAAE,YAAc,OAAOE,CAAI,EAAE,SAAS,EAAG,GAAG,EACxDF,EAAW,CAAC,EAAE,YAAc,OAAOG,CAAK,EAAE,SAAS,EAAG,GAAG,EACzDH,EAAW,CAAC,EAAE,YAAc,OAAOI,CAAO,EAAE,SAAS,EAAG,GAAG,EAC3DJ,EAAW,CAAC,EAAE,YAAc,OAAOK,CAAO,EAAE,SAAS,EAAG,GAAG,CAC7D"}